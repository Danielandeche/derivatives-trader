name: AI Dashboard - Unified Tracker

on:
  # Trigger when PRs are merged
  pull_request_target:
    types: [closed]
    branches: [main, master]
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Weekly refresh
  schedule:
    - cron: '0 6 * * 0'

permissions:
  contents: write
  pull-requests: write

jobs:
  ai-dashboard-update:
    # Only run if PR was actually merged (or manual/schedule trigger)
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    env:
      PR_TITLE: ${{ github.event.pull_request.title || 'Manual/Scheduled Run' }}
      PR_HEAD_REF: ${{ github.event.pull_request.head.ref || 'manual' }}
      PR_AUTHOR: ${{ github.event.pull_request.user.login || 'system' }}
      PR_NUMBER: ${{ github.event.number || 'manual' }}
      REPO_NAME: ${{ github.repository }}
    
    steps:
      - name: Check if this is a dashboard update PR (prevent loops)
        id: check-skip
        run: |
          echo "🔍 Checking if this should trigger dashboard update..."
          
          SHOULD_SKIP="false"
          SKIP_REASON=""
          
          # Skip dashboard update PRs to prevent infinite loops
          if [[ "$PR_TITLE" == *"📊 Dashboard Update"* ]]; then
            SHOULD_SKIP="true"
            SKIP_REASON="Dashboard update PR"
          elif [[ "$PR_TITLE" == *"📊 Update AI Code Analysis Dashboard"* ]]; then
            SHOULD_SKIP="true"
            SKIP_REASON="Dashboard update PR"
          elif [[ "$PR_HEAD_REF" == dashboard-update-* ]]; then
            SHOULD_SKIP="true"
            SKIP_REASON="Dashboard update branch"
          elif [[ "$PR_AUTHOR" == "github-actions[bot]" ]]; then
            SHOULD_SKIP="true"
            SKIP_REASON="GitHub Actions bot"
          fi
          
          if [[ "$SHOULD_SKIP" == "true" ]]; then
            echo "🔄 SKIPPING: $SKIP_REASON (prevents infinite loops)"
          else
            echo "✅ PROCEEDING: Will update dashboard"
          fi
          
          echo "should-skip=$SHOULD_SKIP" >> $GITHUB_OUTPUT
          echo "skip-reason=$SKIP_REASON" >> $GITHUB_OUTPUT

      - name: Checkout repository
        if: steps.check-skip.outputs.should-skip == 'false'
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        if: steps.check-skip.outputs.should-skip == 'false'
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.4
        with:
          node-version: '18'

      - name: Extract AI analysis from merged PR
        if: steps.check-skip.outputs.should-skip == 'false' && github.event_name == 'pull_request_target'
        id: extract-analysis
        run: |
          node -e "
          const https = require('https');
          const fs = require('fs');
          
          const TOKEN = '${{ secrets.GITHUB_TOKEN }}';
          const REPO = process.env.REPO_NAME;
          const PR_NUMBER = process.env.PR_NUMBER;
          
          function makeRequest(path) {
            return new Promise((resolve, reject) => {
              const options = {
                hostname: 'api.github.com',
                path: path,
                headers: {
                  'Authorization': 'token ' + TOKEN,
                  'User-Agent': 'GitHub-Actions',
                  'Accept': 'application/vnd.github.v3+json'
                }
              };
              
              https.get(options, (res) => {
                let data = '';
                res.on('data', chunk => data += chunk);
                res.on('end', () => {
                  try {
                    resolve(JSON.parse(data));
                  } catch (e) {
                    reject(e);
                  }
                });
              }).on('error', reject);
            });
          }
          
          function parseAIAnalysis(comment) {
            if (!comment.body.includes('🤖 AI Code Analysis')) return null;
            
            const body = comment.body;
            
            // Extract percentage
            const percentageMatch = body.match(/(\d+(?:\.\d+)?)%\s+AI-generated/);
            const percentage = percentageMatch ? parseFloat(percentageMatch[1]) : 0;
            
            // Extract total characters
            const totalMatch = body.match(/(\d+)\s+total\s+characters/);
            const totalCharacters = totalMatch ? parseInt(totalMatch[1]) : 0;
            
            // Extract AI characters  
            const aiMatch = body.match(/(\d+)\s+(?:of\s+\d+\s+)?characters.*AI-generated/);
            const aiCharacters = aiMatch ? parseInt(aiMatch[1]) : Math.round((percentage / 100) * totalCharacters);
            
            return {
              percentage: percentage,
              totalCharacters: totalCharacters,
              aiCharacters: aiCharacters,
              files: [] // Could extract file list if needed
            };
          }
          
          async function main() {
            if (PR_NUMBER === 'manual') {
              console.log('Manual trigger - skipping PR analysis');
              return;
            }
            
            console.log('Extracting AI analysis for merged PR #' + PR_NUMBER);
            
            // Get comments for this PR
            const comments = await makeRequest('/repos/' + REPO + '/issues/' + PR_NUMBER + '/comments');
            
            // Find AI analysis comments (get the latest one)
            const aiComments = comments
              .filter(c => c.body.includes('🤖 AI Code Analysis'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            if (aiComments.length === 0) {
              console.log('No AI analysis found for PR #' + PR_NUMBER + ' - creating basic entry');
              
              // Create a basic entry even without analysis
              const basicEntry = {
                timestamp: new Date().toISOString(),
                repository: REPO,
                pullRequest: PR_NUMBER,
                branch: process.env.PR_HEAD_REF,
                author: process.env.PR_AUTHOR,
                prTitle: process.env.PR_TITLE,
                hasAnalysis: false,
                summary: {
                  percentage: 0,
                  totalCharacters: 0,
                  aiCharacters: 0
                },
                files: []
              };
              
              fs.writeFileSync('merged_pr_data.json', JSON.stringify(basicEntry, null, 2));
              return;
            }
            
            console.log('SUCCESS: Found AI analysis for PR #' + PR_NUMBER);
            
            const analysis = parseAIAnalysis(aiComments[0]);
            if (!analysis) {
              console.log('ERROR: Could not parse AI analysis data');
              return;
            }
            
            console.log('PR #' + PR_NUMBER + ': ' + analysis.percentage + '% AI (' + analysis.files.length + ' files)');
            
            analysis.timestamp = new Date().toISOString();
            analysis.repository = REPO;
            analysis.pullRequest = PR_NUMBER; 
            analysis.branch = process.env.PR_HEAD_REF;
            analysis.author = process.env.PR_AUTHOR;
            analysis.prTitle = process.env.PR_TITLE;
            analysis.hasAnalysis = true;
            
            fs.writeFileSync('merged_pr_data.json', JSON.stringify(analysis, null, 2));
          }
          
          main().catch(console.error);
          "

      - name: Update historical data
        if: steps.check-skip.outputs.should-skip == 'false'
        run: |
          # Create data directory if it doesn't exist
          mkdir -p .github/data
          
          # Initialize history file if it doesn't exist
          if [ ! -f ".github/data/ai-analysis-history.json" ]; then
            echo '{"lastUpdated": "", "totalMergedPRs": 0, "analyses": []}' > .github/data/ai-analysis-history.json
          fi
          
          # Add new entry to history (only if we have PR data)
          if [ -f "merged_pr_data.json" ]; then
            node -e "
            const fs = require('fs');
            
            // Read existing history
            const history = JSON.parse(fs.readFileSync('.github/data/ai-analysis-history.json', 'utf8'));
            
            // Read new PR data
            const newEntry = JSON.parse(fs.readFileSync('merged_pr_data.json', 'utf8'));
            
            // Check if this PR is already in history (avoid duplicates)
            const existingIndex = history.analyses.findIndex(
              a => a.repository === newEntry.repository && a.pullRequest === newEntry.pullRequest
            );
            
            if (existingIndex >= 0) {
              // Update existing entry
              history.analyses[existingIndex] = newEntry;
              console.log('📝 Updated existing entry for PR #' + newEntry.pullRequest);
            } else {
              // Add new entry
              history.analyses.push(newEntry);
              console.log('➕ Added new entry for PR #' + newEntry.pullRequest);
            }
            
            // Sort by merged date (newest first)
            history.analyses.sort((a, b) => new Date(b.mergedAt || b.timestamp) - new Date(a.mergedAt || a.timestamp));
            
            // Update metadata
            history.lastUpdated = new Date().toISOString();
            history.totalMergedPRs = history.analyses.length;
            
            // Save updated history
            fs.writeFileSync('.github/data/ai-analysis-history.json', JSON.stringify(history, null, 2));
            
            console.log('History updated: ' + history.totalMergedPRs + ' total merged PRs tracked');
            "
          else
            echo "No PR data to add to history (manual/scheduled run)"
          fi

      - name: Prepare dashboard generation script
        if: steps.check-skip.outputs.should-skip == 'false'
        run: |
          mkdir -p .github/scripts
          
          # If the script doesn't exist locally, copy from the workflow repo
          if [ ! -f ".github/scripts/generate-dashboard.js" ]; then
            echo "Copying dashboard script from workflow repository..."
            WORKFLOW_REPO="${{ github.repository }}"
            if [[ "$WORKFLOW_REPO" != *"shift-ai"* ]]; then
              WORKFLOW_REPO="${{ github.repository_owner }}/shift-ai"
            fi
            curl -sL "https://raw.githubusercontent.com/${WORKFLOW_REPO}/main/.github/scripts/generate-dashboard.js" > .github/scripts/generate-dashboard.js
            chmod +x .github/scripts/generate-dashboard.js
          fi

      - name: Generate updated dashboard
        if: steps.check-skip.outputs.should-skip == 'false'
        run: |
          node .github/scripts/generate-dashboard.js

      - name: Create/Update Dashboard PR  
        if: steps.check-skip.outputs.should-skip == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Define branch name first (before any potential exits)
          BRANCH_NAME="dashboard-update-$(date +%Y%m%d)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "🔧 Set BRANCH_NAME=$BRANCH_NAME"
          
          # Add all changes
          git add .github/data/ai-analysis-history.json AI-DASHBOARD.md
          
          # Only proceed if there are changes
          if git diff --staged --quiet; then
            echo "ℹ️  No changes to commit"
            exit 0
          fi
          
          # Check if branch already exists locally
          if git rev-parse --verify "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "📝 Switching to existing branch: $BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git merge origin/master --no-edit
          else
            echo "🌿 Creating new branch: $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
          fi
          
          # Re-add changes (in case of merge conflicts)
          git add .github/data/ai-analysis-history.json AI-DASHBOARD.md
          
          # Commit changes
          if [[ "$PR_NUMBER" == "manual" ]]; then
            COMMIT_MSG="📊 Manual Dashboard Update
            
            - Updated: $(date -u +"%Y-%m-%d %H:%M UTC")
            - Trigger: ${{ github.event_name }}
            - Manual dashboard refresh"
          else
            COMMIT_MSG="📊 Track merged PR #$PR_NUMBER: $PR_TITLE
            
            - Merged: ${{ github.event.pull_request.merged_at }}
            - Author: $PR_AUTHOR
            - Updated dashboard with historical data"
          fi
          
          git commit -m "$COMMIT_MSG"
          
          # Push to remote (force to handle multiple updates to same branch)
          git push origin "$BRANCH_NAME" --force
          
          echo "✅ Changes pushed to branch: $BRANCH_NAME"

      - name: Create or Update Pull Request
        if: steps.check-skip.outputs.should-skip == 'false'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = process.env.BRANCH_NAME;
            const prNumber = process.env.PR_NUMBER;
            const prTitle = process.env.PR_TITLE;
            const prAuthor = process.env.PR_AUTHOR;
            const { owner, repo } = context.repo;
            
            console.log('Environment check:');
            console.log('  BRANCH_NAME:', branchName);
            console.log('  PR_NUMBER:', prNumber);
            console.log('  owner:', owner);
            console.log('  repo:', repo);
            
            if (!branchName || branchName.trim() === '') {
              throw new Error('BRANCH_NAME environment variable is not set or empty!');
            }
            
            // Check if PR already exists for this branch
            try {
              const { data: existingPRs } = await github.rest.pulls.list({
                owner,
                repo,
                head: `${owner}:${branchName}`,
                state: 'open'
              });
              
              let prBody;
              if (prNumber === 'manual') {
                prBody = [
                  '## 📊 AI Dashboard Update - Manual/Scheduled Refresh',
                  '',
                  '🤖 This PR contains a manual or scheduled refresh of the AI Code Analysis Dashboard.',
                  '',
                  '### 📈 What\'s Updated:',
                  '- `AI-DASHBOARD.md` - Refreshed dashboard with latest statistics',
                  '- Historical data file (if any new data available)',
                  '',
                  '### 🔄 Update Details:',
                  '- **Trigger**: ' + context.eventName,
                  '- **Updated**: ' + new Date().toISOString(),
                  '',
                  '---',
                  '*🤖 This PR was generated by the unified AI Dashboard workflow.*'
                ].join('\n');
              } else {
                prBody = [
                  '## 📊 AI Dashboard Update - Merged PR Tracking',
                  '',
                  '🤖 This PR automatically tracks merged PRs and updates the AI Code Analysis Dashboard.',
                  '',
                  '### 🎯 Latest Merged PR:',
                  '- **PR #' + prNumber + '**: ' + prTitle,
                  '- **Author**: @' + prAuthor,
                  '- **Merged**: ' + new Date().toISOString(),
                  '',
                  '### 📈 What\'s Updated:',
                  '- `.github/data/ai-analysis-history.json` - Historical tracking data',
                  '- `AI-DASHBOARD.md` - Updated dashboard with latest statistics',
                  '',
                  '### 🔄 Update Details:',
                  '- **Trigger**: PR merge event',
                  '- **Branch**: Daily consolidation (' + branchName + ')',
                  '',
                  '---',
                  '*🤖 This PR was generated by the unified AI Dashboard workflow.*'
                ].join('\n');
              }

              if (existingPRs.length > 0) {
                // Update existing PR
                const pr = existingPRs[0];
                await github.rest.pulls.update({
                  owner,
                  repo,
                  pull_number: pr.number,
                  body: prBody
                });
                
                console.log('✅ Updated existing dashboard PR #' + pr.number + ': ' + pr.html_url);
                
              } else {
                // Create new PR
                const { data: newPR } = await github.rest.pulls.create({
                  owner,
                  repo,
                  title: '📊 Dashboard Update - ' + new Date().toISOString().split('T')[0],
                  head: branchName,
                  base: 'master',
                  body: prBody,
                  draft: false
                });
                
                console.log('✅ Created new dashboard PR #' + newPR.number + ': ' + newPR.html_url);
              }
              
            } catch (error) {
              console.error('Error managing dashboard PR:', error);
              throw error;
            }

      - name: Auto-merge Dashboard PR
        if: steps.check-skip.outputs.should-skip == 'false'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        env:
          SHIFTAI_TOKEN: ${{ secrets.SHIFTAI_TOKEN }}
        with:
          github-token: ${{ secrets.SHIFTAI_TOKEN }}
          script: |
            const branchName = process.env.BRANCH_NAME;
            const shiftaiToken = process.env.SHIFTAI_TOKEN;
            const { owner, repo } = context.repo;
            
            if (!shiftaiToken) {
              console.log('SHIFTAI_TOKEN not available - skipping auto-merge');
              return;
            }
            
            console.log('SHIFTAI_TOKEN detected - attempting auto-merge...');
            
            if (!branchName || branchName.trim() === '') {
              console.log('ERROR: BRANCH_NAME not set - cannot auto-merge');
              return;
            }
            
            try {
              // Find the dashboard PR
              const { data: existingPRs } = await github.rest.pulls.list({
                owner,
                repo,
                head: `${owner}:${branchName}`,
                state: 'open'
              });
              
              if (existingPRs.length > 0) {
                const pr = existingPRs[0];
                
                // Wait a moment for any checks to start
                await new Promise(resolve => setTimeout(resolve, 5000));
                
                // Auto-merge the PR
                await github.rest.pulls.merge({
                  owner,
                  repo,
                  pull_number: pr.number,
                  merge_method: 'squash',
                  commit_title: '📊 Auto-merged: AI Dashboard Update',
                  commit_message: 'Automatically merged dashboard update PR\n\n🤖 This PR was auto-merged using administrative privileges to maintain dashboard currency.'
                });
                
                console.log('✅ Auto-merged dashboard PR #' + pr.number);
                console.log('🚀 Dashboard is now live with latest data!');
                
              } else {
                console.log('⚠️  No open dashboard PR found to auto-merge');
              }
              
            } catch (error) {
              console.error('❌ Auto-merge failed:', error.message);
              console.log('💡 PR will remain open for manual review and merge');
              // Don't throw - let workflow continue
            }

      - name: Output summary
        if: steps.check-skip.outputs.should-skip == 'false'
        env:
          SHIFTAI_TOKEN: ${{ secrets.SHIFTAI_TOKEN }}
        run: |
          echo "📊 AI Dashboard Update Complete!"
          echo ""
          if [[ "$PR_NUMBER" != "manual" ]]; then
            echo "✅ Tracked PR #$PR_NUMBER: $PR_TITLE"
            echo "👤 Author: $PR_AUTHOR"
            echo "🕐 Merged: ${{ github.event.pull_request.merged_at }}"
          else
            echo "🔄 Manual/scheduled dashboard refresh"
          fi
          echo ""
          echo "📝 Process completed:"
          echo "   • ✅ Updated historical tracking data"
          echo "   • ✅ Generated updated dashboard"
          echo "   • ✅ Created/updated dashboard PR"
          if [ -n "$SHIFTAI_TOKEN" ]; then
            echo "   • 🤖 Auto-merge attempted"
          else
            echo "   • ⏳ Waiting for manual review and merge"
          fi
          echo ""
          echo "🔗 View dashboard: https://github.com/${{ github.repository }}/blob/master/AI-DASHBOARD.md"

      - name: Skip notification
        if: steps.check-skip.outputs.should-skip == 'true'
        run: |
          echo "⏭️  Skipping dashboard update"
          echo "📝 Reason: ${{ steps.check-skip.outputs.skip-reason }}"
          echo "💡 This prevents infinite loops of dashboard updates triggering more updates" 